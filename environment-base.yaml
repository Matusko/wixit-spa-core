---
AWSTemplateFormatVersion: 2010-09-09

Resources:
  SiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: wixit-spa-core
  SiteCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Cloudfront to s3 wixit-spa-core access Identity
  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
        - Sid: "AllowCloudFrontAccessIdentity"
          Action:
          - "s3:GetObject"
          Effect: "Allow"
          Resource:
            Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - Ref: "SiteBucket"
              - "/*"
          Principal:
            AWS:
              Fn::Join:
              - " "
              - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                - !Ref SiteCloudFrontOriginAccessIdentity
  SiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt [SiteBucket, DomainName]
          Id: mainS3Origin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Join:
              - ""
              - - "origin-access-identity/cloudfront/"
                - Ref: SiteCloudFrontOriginAccessIdentity
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - HEAD
          - GET
          - OPTIONS
          TargetOriginId: mainS3Origin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
          - EventType: origin-request
            LambdaFunctionARN: !Ref TheOriginRequestLambdaFunctionVersion
        PriceClass: PriceClass_All
        HttpVersion: "http2"
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'

  TheOriginRequestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          'use strict';
          const AWS = require('aws-sdk');
          exports.handler = (event, context, callback) => {
            console.log("BANANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
          };
      Handler: index.handler
      MemorySize: 128
      Role: !Sub ${TheOriginRequestLambdaFunctionExecutionRole.Arn}
      Runtime: nodejs6.10

  TheOriginRequestLambdaFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref TheOriginRequestLambdaFunction

  TheOriginRequestLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - edgelambda.amazonaws.com
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole